
R version 3.4.2 (2017-09-28) -- "Short Summer"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "matter"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('matter')
Loading required package: biglm
Loading required package: DBI

Attaching package: ‘matter’

The following object is masked from ‘package:biglm’:

    biglm

The following objects are masked from ‘package:base’:

    apply, scale

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("apply")
> ### * apply
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: apply
> ### Title: Apply Functions Over "matter" Matrices
> ### Aliases: apply apply,matter_mat-method
> ### Keywords: methods
> 
> ### ** Examples
> 
> x <- matter(1:100, nrow=10, ncol=10)
> 
> apply(x, 2, summary)
         [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]  [,10]
Min.     1.00 11.00 21.00 31.00 41.00 51.00 61.00 71.00 81.00  91.00
1st Qu.  3.25 13.25 23.25 33.25 43.25 53.25 63.25 73.25 83.25  93.25
Median   5.50 15.50 25.50 35.50 45.50 55.50 65.50 75.50 85.50  95.50
Mean     5.50 15.50 25.50 35.50 45.50 55.50 65.50 75.50 85.50  95.50
3rd Qu.  7.75 17.75 27.75 37.75 47.75 57.75 67.75 77.75 87.75  97.75
Max.    10.00 20.00 30.00 40.00 50.00 60.00 70.00 80.00 90.00 100.00
> 
> 
> 
> cleanEx()
> nameEx("biglm")
> ### * biglm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bigglm
> ### Title: Using "biglm" with "matter"
> ### Aliases: biglm biglm,formula,matter_df-method bigglm
> ###   bigglm,formula,matter_df-method bigglm,formula,matter_mat-method
> ### Keywords: models regression
> 
> ### ** Examples
> 
> set.seed(1)
> 
> x <- matter_mat(rnorm(1000), nrow=100, ncol=10)
> 
> colnames(x) <- c(paste0("x", 1:9), "y")
> 
> fm <- paste0("y ~ ", paste0(paste0("x", 1:9), collapse=" + "))
> fm <- as.formula(fm)
> 
> fit <- bigglm(fm, data=x, chunksize=50)
> coef(fit)
(Intercept)          x1          x2          x3          x4          x5 
-0.03523360  0.11311493 -0.01989207 -0.19409195  0.08794120 -0.11345792 
         x6          x7          x8          x9 
-0.09366813 -0.08451424  0.05626240  0.19443693 
> 
> 
> 
> cleanEx()
> nameEx("bsearch")
> ### * bsearch
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bsearch
> ### Title: Binary Search with Approximate Matching
> ### Aliases: bsearch
> ### Keywords: utilities
> 
> ### ** Examples
> 
> x <- c(1.11, 2.22, 3.33, 5.0, 5.1)
> 
> bsearch(2.22, x) # 2
[1] 2
> bsearch(3.0, x) # NA
[1] NA
> bsearch(3.0, x, nearest=TRUE) # 3
[1] 3
> bsearch(3.0, x, tol=0.1, tol.ref="values") # 3
[1] 3
> 
> y <- c("hello", "world!")
> bsearch("world!", y) # 2
[1] 2
> bsearch("worl", y) # NA
[1] NA
> bsearch("worl", y, nearest=TRUE) # 2
[1] 2
> 
> 
> 
> cleanEx()
> nameEx("checksum")
> ### * checksum
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: checksum
> ### Title: Calculate Checksums and Cryptographic Hashes
> ### Aliases: checksum checksum,matter-method
> ### Keywords: utilities
> 
> ### ** Examples
> 
> x <- matter(1:10)
> y <- matter(1:10)
> 
> checksum(x)
/var/folders/2c/6pcfrl2915b6gpjv4j3bsn700000gp/T//RtmpHyiyHm/filea1e813e794d3.bin 
                                       "e0d2592373a0c161e56e266306cd8405cd719d19" 
attr(,"algo")
[1] "sha1"
> checksum(y) # should be the same
/var/folders/2c/6pcfrl2915b6gpjv4j3bsn700000gp/T//RtmpHyiyHm/filea1e848dbb2da.bin 
                                       "e0d2592373a0c161e56e266306cd8405cd719d19" 
attr(,"algo")
[1] "sha1"
> 
> 
> 
> cleanEx()
> nameEx("combiner-method")
> ### * combiner-method
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: combiner
> ### Title: Get or Set combiner for an Object
> ### Aliases: combiner combiner<-
> ### Keywords: utilities
> 
> ### ** Examples
> 
> x <- sparse_mat(diag(10))
> combiner(x)
function (x, group, ngroup, default = NA) 
{
    vals <- vector(mode = typeof(x), length = ngroup)
    if (anyDuplicated(group, incomparables = NA) > 0) 
        stop("duplicate key matches, can't resolve collision")
    vals[] <- default
    na_rm <- !is.na(group)
    vals[group[na_rm]] <- x[na_rm]
    vals
}
<environment: namespace:matter>
attr(,"name")
[1] "identity"
> combiner(x) <- "sum"
> x[]
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
 [1,]    1    0    0    0    0    0    0    0    0     0
 [2,]    0    1    0    0    0    0    0    0    0     0
 [3,]    0    0    1    0    0    0    0    0    0     0
 [4,]    0    0    0    1    0    0    0    0    0     0
 [5,]    0    0    0    0    1    0    0    0    0     0
 [6,]    0    0    0    0    0    1    0    0    0     0
 [7,]    0    0    0    0    0    0    1    0    0     0
 [8,]    0    0    0    0    0    0    0    1    0     0
 [9,]    0    0    0    0    0    0    0    0    1     0
[10,]    0    0    0    0    0    0    0    0    0     1
> 
> 
> 
> cleanEx()
> nameEx("delayed-ops")
> ### * delayed-ops
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: delayed-ops
> ### Title: Delayed Operations on "matter" Objects
> ### Aliases: Arith Compare Arith,matter_vec,numeric-method
> ###   Arith,numeric,matter_vec-method Arith,matter_vec,matter_vec-method
> ###   Arith,numeric,matter_matc-method Arith,matter_matc,numeric-method
> ###   Arith,matter_matc,matter_matc-method Arith,numeric,matter_matr-method
> ###   Arith,matter_matr,numeric-method Arith,matter_matr,matter_matr-method
> ###   Arith,matter_arr,matter_arr-method Arith,matter_arr,numeric-method
> ###   Arith,numeric,matter_arr-method Arith,matter_fc,numeric-method
> ###   Arith,numeric,matter_fc-method Arith,matter_fc,matter_fc-method
> ###   Compare,matter_vec,raw-method Compare,matter_vec,numeric-method
> ###   Compare,raw,matter_vec-method Compare,numeric,matter_vec-method
> ###   Compare,matter_vec,matter_vec-method Compare,raw,matter_matc-method
> ###   Compare,numeric,matter_matc-method Compare,matter_matc,raw-method
> ###   Compare,matter_matc,numeric-method
> ###   Compare,matter_matc,matter_matc-method Compare,raw,matter_matr-method
> ###   Compare,numeric,matter_matr-method Compare,matter_matr,raw-method
> ###   Compare,matter_matr,numeric-method
> ###   Compare,matter_matr,matter_matr-method Compare,matter_arr,raw-method
> ###   Compare,matter_arr,numeric-method Compare,raw,matter_arr-method
> ###   Compare,numeric,matter_arr-method
> ###   Compare,matter_arr,matter_arr-method Compare,matter_fc,numeric-method
> ###   Compare,matter_fc,character-method Compare,matter_fc,factor-method
> ###   Compare,numeric,matter_fc-method Compare,character,matter_fc-method
> ###   Compare,factor,matter_fc-method Compare,matter_fc,matter_fc-method
> ###   exp,matter_vec-method exp,matter_mat-method exp,matter_arr-method
> ###   exp,matter_fc-method log,matter_vec-method log,matter_matc-method
> ###   log,matter_matr-method log,matter_arr-method log,matter_fc-method
> ###   log,matter_vec,numeric-method log,matter_matc,numeric-method
> ###   log,matter_matr,numeric-method log,matter_arr,numeric-method
> ###   log,matter_fc,numeric-method log2,matter_vec-method
> ###   log2,matter_mat-method log2,matter_arr-method log2,matter_fc-method
> ###   log10,matter_vec-method log10,matter_mat-method
> ###   log10,matter_arr-method log10,matter_fc-method
> ### Keywords: methods arith
> 
> ### ** Examples
> 
> x <- matter(1:100)
> y <- 2 * x + 1
> 
> x[1:10]
 [1]  1  2  3  4  5  6  7  8  9 10
> y[1:10]
 [1]  3  5  7  9 11 13 15 17 19 21
> 
> mean(x)
[1] 50.5
> mean(y)
[1] 102
> 
> 
> 
> cleanEx()
> nameEx("drle-class")
> ### * drle-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: drle-class
> ### Title: Delta Run Length Encoding
> ### Aliases: class:drle drle drle-class
> ###   [,drle,missing,missing,missing-method
> ###   [,drle,ANY,missing,missing-method c,drle-method length,drle-method
> ###   as.vector,drle-method as.list,drle-method is.drle
> ### Keywords: classes
> 
> ### ** Examples
> 
> ## Create a drle vector
> x <- c(1,1,1,1,1,6,7,8,9,10,21,32,33,34,15)
> y <- drle(x)
> 
> # Check that their elements are equal
> x == y[]
 [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
> 
> 
> 
> cleanEx()
> nameEx("keys-method")
> ### * keys-method
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: keys
> ### Title: Get or Set Keys for an Object
> ### Aliases: keys keys<-
> ### Keywords: utilities
> 
> ### ** Examples
> 
> x <- sparse_mat(diag(10))
> keys(x)
NULL
> keys(x) <- 1:10
> x[]
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
 [1,]    1    0    0    0    0    0    0    0    0     0
 [2,]    0    1    0    0    0    0    0    0    0     0
 [3,]    0    0    1    0    0    0    0    0    0     0
 [4,]    0    0    0    1    0    0    0    0    0     0
 [5,]    0    0    0    0    1    0    0    0    0     0
 [6,]    0    0    0    0    0    1    0    0    0     0
 [7,]    0    0    0    0    0    0    1    0    0     0
 [8,]    0    0    0    0    0    0    0    1    0     0
 [9,]    0    0    0    0    0    0    0    0    1     0
[10,]    0    0    0    0    0    0    0    0    0     1
> 
> 
> 
> cleanEx()
> nameEx("matter-class")
> ### * matter-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: matter-class
> ### Title: Vectors, Matrices, and Arrays Stored on Disk
> ### Aliases: class:matter matter matter-class adata adata,matter-method
> ###   atomdata atomdata,matter-method atomdata<- atomdata<-,matter-method
> ###   datamode datamode<- datamode,atoms-method datamode<-,atoms-method
> ###   datamode,matter-method datamode<-,matter-method
> ###   datamode<-,matter_vt-method paths paths<- paths,matter-method
> ###   paths<-,matter-method paths<-,matter_vt-method filemode filemode<-
> ###   filemode,matter-method filemode<-,matter-method
> ###   filemode<-,matter_vt-method readonly readonly<-
> ###   readonly,matter-method readonly<-,matter-method
> ###   readonly<-,matter_vt-method chunksize chunksize<-
> ###   chunksize,matter-method chunksize<-,matter-method
> ###   chunksize<-,matter_vt-method length,atoms-method length,matter-method
> ###   length<-,matter-method dim,atoms-method dim,matter-method
> ###   dim<-,matter-method names,matter-method names<-,matter-method
> ###   dimnames,matter-method dimnames<-,matter,ANY-method
> ###   [,atoms,ANY,missing,ANY-method [,atoms,missing,ANY,ANY-method
> ###   [,atoms,ANY,ANY,ANY-method [[,atoms-method [[,atoms,ANY,ANY-method
> ###   c,atoms-method c,matter-method which,matter-method is.matter
> ###   as.matter
> ### Keywords: classes array IO
> 
> ### ** Examples
> 
> ## Create a matter_vec vector
> x <- matter(1:100, length=100)
> x[]
  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18
 [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36
 [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54
 [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72
 [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90
 [91]  91  92  93  94  95  96  97  98  99 100
> 
> ## Create a matter_mat matrix
> x <- matter(1:100, nrow=10, ncol=10)
> x[]
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
 [1,]    1   11   21   31   41   51   61   71   81    91
 [2,]    2   12   22   32   42   52   62   72   82    92
 [3,]    3   13   23   33   43   53   63   73   83    93
 [4,]    4   14   24   34   44   54   64   74   84    94
 [5,]    5   15   25   35   45   55   65   75   85    95
 [6,]    6   16   26   36   46   56   66   76   86    96
 [7,]    7   17   27   37   47   57   67   77   87    97
 [8,]    8   18   28   38   48   58   68   78   88    98
 [9,]    9   19   29   39   49   59   69   79   89    99
[10,]   10   20   30   40   50   60   70   80   90   100
> 
> 
> 
> cleanEx()
> nameEx("matter_arr-class")
> ### * matter_arr-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: matter_arr-class
> ### Title: Arrays Stored on Disk
> ### Aliases: class:matter_arr matter_arr matter_arr-class
> ###   [,matter_arr-method [,matter_arr,ANY,ANY,ANY-method
> ###   [<-,matter_arr-method [<-,matter_arr,ANY,ANY,ANY-method
> ###   dim<-,matter_arr-method as.vector,matter_arr-method
> ###   as.array,matter_arr-method
> ### Keywords: classes array IO
> 
> ### ** Examples
> 
> x <- matter_arr(1:125, dim=c(5,5,5))
> x[]
, , 1

     [,1] [,2] [,3] [,4] [,5]
[1,]    1    6   11   16   21
[2,]    2    7   12   17   22
[3,]    3    8   13   18   23
[4,]    4    9   14   19   24
[5,]    5   10   15   20   25

, , 2

     [,1] [,2] [,3] [,4] [,5]
[1,]   26   31   36   41   46
[2,]   27   32   37   42   47
[3,]   28   33   38   43   48
[4,]   29   34   39   44   49
[5,]   30   35   40   45   50

, , 3

     [,1] [,2] [,3] [,4] [,5]
[1,]   51   56   61   66   71
[2,]   52   57   62   67   72
[3,]   53   58   63   68   73
[4,]   54   59   64   69   74
[5,]   55   60   65   70   75

, , 4

     [,1] [,2] [,3] [,4] [,5]
[1,]   76   81   86   91   96
[2,]   77   82   87   92   97
[3,]   78   83   88   93   98
[4,]   79   84   89   94   99
[5,]   80   85   90   95  100

, , 5

     [,1] [,2] [,3] [,4] [,5]
[1,]  101  106  111  116  121
[2,]  102  107  112  117  122
[3,]  103  108  113  118  123
[4,]  104  109  114  119  124
[5,]  105  110  115  120  125

> 
> 
> 
> cleanEx()
> nameEx("matter_df-class")
> ### * matter_df-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: matter_df-class
> ### Title: Data Frames Stored on Disk
> ### Aliases: class:matter_df matter_df matter_df-class
> ###   names<-,matter_tbl-method dimnames<-,matter_tbl,ANY-method
> ###   [,matter_df-method [,matter_df,ANY,ANY,ANY-method
> ###   [,matter_df,ANY,ANY,NULL-method [,matter_df,ANY,missing,ANY-method
> ###   [,matter_df,ANY,missing,NULL-method
> ###   [,matter_df,missing,ANY,ANY-method
> ###   [,matter_df,missing,ANY,NULL-method
> ###   [,matter_df,missing,missing,ANY-method [<-,matter_df-method
> ###   [<-,matter_df,ANY,ANY,ANY-method [<-,matter_df,ANY,missing,ANY-method
> ###   [<-,matter_df,missing,ANY,ANY-method
> ###   [<-,matter_df,missing,missing,ANY-method
> ###   [[,matter_df,ANY,missing-method [[<-,matter_df,ANY,missing-method
> ###   $,matter_df-method $<-,matter_df-method head,matter_tbl-method
> ###   tail,matter_tbl-method as.data.frame,matter_df-method
> ### Keywords: classes array IO
> 
> ### ** Examples
> 
> x <- matter_df(a=as.matter(1:10), b=as.matter(1:10))
> x[]
    a  b
1   1  1
2   2  2
3   3  3
4   4  4
5   5  5
6   6  6
7   7  7
8   8  8
9   9  9
10 10 10
> x[[1]]
 [1]  1  2  3  4  5  6  7  8  9 10
> x[["a"]]
 [1]  1  2  3  4  5  6  7  8  9 10
> x[,"a"]
 [1]  1  2  3  4  5  6  7  8  9 10
> x[1:5,c("a","b")]
  a b
1 1 1
2 2 2
3 3 3
4 4 4
5 5 5
> x$a
 [1]  1  2  3  4  5  6  7  8  9 10
> x$a[1:10]
 [1]  1  2  3  4  5  6  7  8  9 10
> 
> 
> 
> cleanEx()
> nameEx("matter_fc-class")
> ### * matter_fc-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: matter_fc-class
> ### Title: Factors Stored on Disk
> ### Aliases: class:matter_fc matter_fc matter_fc-class [,matter_fc-method
> ###   [,matter_fc,ANY,missing,ANY-method
> ###   [,matter_fc,ANY,missing,NULL-method
> ###   [,matter_fc,missing,missing,ANY-method [<-,matter_fc-method
> ###   [<-,matter_fc,ANY,missing,ANY-method
> ###   [<-,matter_fc,missing,missing,ANY-method levels,matter_fc-method
> ###   levels<-,matter_fc-method
> ### Keywords: classes array IO
> 
> ### ** Examples
> 
> x <- matter_fc(c("a", "a", "b"), levels=c("a", "b", "c"))
> x[]
[1] a a b
Levels: a b c
> 
> 
> 
> cleanEx()
> nameEx("matter_list-class")
> ### * matter_list-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: matter_list-class
> ### Title: Lists of Vectors Stored on Disk
> ### Aliases: class:matter_list matter_list matter_list-class
> ###   lengths,matter_list-method [,matter_list-method
> ###   [,matter_list,ANY,ANY,ANY-method [,matter_list,ANY,ANY,NULL-method
> ###   [,matter_list,ANY,missing,ANY-method
> ###   [,matter_list,ANY,missing,NULL-method
> ###   [,matter_list,missing,missing,ANY-method [<-,matter_list-method
> ###   [<-,matter_list,ANY,ANY,ANY-method
> ###   [<-,matter_list,ANY,missing,ANY-method
> ###   [<-,matter_list,missing,missing,ANY-method
> ###   [[,matter_list,ANY,missing-method [[<-,matter_list,ANY,missing-method
> ###   $,matter_list-method $<-,matter_list-method
> ###   as.list,matter_list-method
> ### Keywords: classes array IO
> 
> ### ** Examples
> 
> x <- matter_list(list(c(TRUE,FALSE), 1:5, c(1.11, 2.22, 3.33)), lengths=c(2,5,3))
> x[]
[[1]]
[1]  TRUE FALSE

[[2]]
[1] 1 2 3 4 5

[[3]]
[1] 1.11 2.22 3.33

> x[[1]]
[1]  TRUE FALSE
> x[3,2]
[1] 2.22
> x[2,5]
[1] 5
> 
> 
> 
> cleanEx()
> nameEx("matter_mat-class")
> ### * matter_mat-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: matter_mat-class
> ### Title: Matrices Stored on Disk
> ### Aliases: class:matter_mat matter_mat matter_matc matter_matr
> ###   matter_mat-class matter_matc-class matter_matr-class
> ###   [,matter_mat-method [,matter_mat,ANY,ANY,ANY-method
> ###   [,matter_mat,ANY,ANY,NULL-method [,matter_mat,ANY,missing,ANY-method
> ###   [,matter_mat,ANY,missing,NULL-method
> ###   [,matter_mat,missing,ANY,ANY-method
> ###   [,matter_mat,missing,ANY,NULL-method
> ###   [,matter_mat,missing,missing,ANY-method [<-,matter_mat-method
> ###   [<-,matter_mat,ANY,ANY,ANY-method
> ###   [<-,matter_mat,ANY,missing,ANY-method
> ###   [<-,matter_mat,missing,ANY,ANY-method
> ###   [<-,matter_mat,missing,missing,ANY-method cbind,matter-method
> ###   rbind,matter-method t.matter t,matter_matc-method
> ###   t,matter_matr-method %*%,matter,matter-method
> ###   %*%,matrix,matter_mat-method %*%,matter_mat,matrix-method
> ###   %*%,matter_matc,numeric-method %*%,matter_matr,numeric-method
> ###   %*%,numeric,matter_matc-method %*%,numeric,matter_matr-method
> ###   crossprod,matter,ANY-method crossprod,ANY,matter-method
> ###   tcrossprod,matter,ANY-method tcrossprod,ANY,matter-method
> ###   as.matrix,matter_mat-method
> ### Keywords: classes array IO
> 
> ### ** Examples
> 
> x <- matter_mat(1:100, nrow=10, ncol=10)
> x[]
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
 [1,]    1   11   21   31   41   51   61   71   81    91
 [2,]    2   12   22   32   42   52   62   72   82    92
 [3,]    3   13   23   33   43   53   63   73   83    93
 [4,]    4   14   24   34   44   54   64   74   84    94
 [5,]    5   15   25   35   45   55   65   75   85    95
 [6,]    6   16   26   36   46   56   66   76   86    96
 [7,]    7   17   27   37   47   57   67   77   87    97
 [8,]    8   18   28   38   48   58   68   78   88    98
 [9,]    9   19   29   39   49   59   69   79   89    99
[10,]   10   20   30   40   50   60   70   80   90   100
> 
> 
> 
> cleanEx()
> nameEx("matter_str-class")
> ### * matter_str-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: matter_str-class
> ### Title: Strings Stored on Disk
> ### Aliases: class:matter_str matter_str matter_str-class
> ###   lengths,matter_str-method [,matter_str-method
> ###   [,matter_str,ANY,ANY,ANY-method [,matter_str,ANY,ANY,NULL-method
> ###   [,matter_str,ANY,missing,ANY-method
> ###   [,matter_str,ANY,missing,NULL-method
> ###   [,matter_str,missing,missing,ANY-method [<-,matter_str-method
> ###   [<-,matter_str,ANY,ANY,ANY-method
> ###   [<-,matter_str,ANY,missing,ANY-method
> ###   [<-,matter_str,missing,missing,ANY-method
> ###   [[,matter_str,ANY,missing-method [[<-,matter_str,ANY,missing-method
> ###   as.vector,matter_str-method
> ### Keywords: classes array IO
> 
> ### ** Examples
> 
> x <- matter_str(c("hello", "world!"))
> x[]
[1] "hello"  "world!"
> 
> 
> 
> cleanEx()
> nameEx("matter_vec-class")
> ### * matter_vec-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: matter_vec-class
> ### Title: Vectors Stored on Disk
> ### Aliases: class:matter_vec matter_vec matter_vec-class
> ###   [,matter_vec-method [,matter_vec,ANY,missing,ANY-method
> ###   [,matter_vec,ANY,missing,NULL-method
> ###   [,matter_vec,missing,missing,ANY-method [<-,matter_vec-method
> ###   [<-,matter_vec,ANY,missing,ANY-method
> ###   [<-,matter_vec,missing,missing,ANY-method c,matter_vec-method
> ###   t,matter_vec-method dim<-,matter_vec-method
> ###   as.vector,matter_vec-method as.matrix,matter_vec-method
> ###   as.array,matter_vec-method
> ### Keywords: classes array IO
> 
> ### ** Examples
> 
> x <- matter_vec(1:100)
> x[]
  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18
 [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36
 [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54
 [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72
 [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90
 [91]  91  92  93  94  95  96  97  98  99 100
> 
> 
> 
> cleanEx()
> nameEx("prcomp")
> ### * prcomp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: prcomp
> ### Title: Principal Components Analysis for "matter" Matrices
> ### Aliases: prcomp prcomp,matter_mat-method
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> set.seed(1)
> 
> x <- matter_mat(rnorm(1000), nrow=100, ncol=10)
> 
> prcomp(x)
Standard deviations (1, .., p=3):
[1] 1.269363 1.246694 1.187657

Rotation (n x k) = (10 x 3):
              PC1         PC2         PC3
 [1,]  0.22358717 -0.04384519 -0.03465806
 [2,]  0.18511020  0.01905189 -0.02862531
 [3,] -0.11992159  0.14134479 -0.54592323
 [4,]  0.02046621 -0.40902231 -0.23137567
 [5,]  0.72081289  0.07545634 -0.45209190
 [6,] -0.23548406 -0.04338255 -0.09948186
 [7,]  0.26021110  0.26169750  0.15836329
 [8,]  0.49579071 -0.03016529  0.46863222
 [9,]  0.10598111 -0.62346748 -0.28297706
[10,]  0.03418671 -0.58715764  0.32765486
> 
> 
> 
> cleanEx()
> nameEx("profmem")
> ### * profmem
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: profmem
> ### Title: Profile Memory Use
> ### Aliases: profmem mem
> ### Keywords: utilities
> 
> ### ** Examples
> 
> x <- 1:100
> 
> mem(x)
bytes 
  440 
> 
> profmem(mean(x + 1))
   start (MB)   finish (MB) max used (MB) overhead (MB)    time (sec) 
      133.300       133.300       133.400         0.100         0.001 
> 
> 
> 
> cleanEx()
> nameEx("scale")
> ### * scale
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: scale
> ### Title: Scaling and Centering of "matter" Matrices
> ### Aliases: scale scale.matter scale,matter_mat-method
> ### Keywords: methods
> 
> ### ** Examples
> 
> x <- matter(1:100, nrow=10, ncol=10)
> 
> scale(x)
An object of class 'matter_matc'
  <10 row, 10 column> matrix
    sources: 1 
    datamode: numeric 
    16.5 KB real memory
    400 bytes virtual memory
    scaled:center = TRUE
    scaled:scale = TRUE
> 
> 
> 
> cleanEx()
> nameEx("sparse_mat-class")
> ### * sparse_mat-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sparse_mat-class
> ### Title: Sparse Matrices
> ### Aliases: class:sparse_mat sparse_mat sparse_matc sparse_matr
> ###   sparse_mat-class sparse_matc-class sparse_matr-class
> ###   keys,sparse_mat-method keys<-,sparse_mat-method
> ###   tolerance,sparse_mat-method tolerance<-,sparse_mat-method
> ###   combiner,sparse_mat-method combiner<-,sparse_mat-method
> ###   datamode<-,sparse_mat-method [,sparse_mat-method
> ###   [,sparse_mat,ANY,ANY,ANY-method [,sparse_mat,ANY,ANY,NULL-method
> ###   [,sparse_mat,ANY,missing,ANY-method
> ###   [,sparse_mat,ANY,missing,NULL-method
> ###   [,sparse_mat,missing,ANY,ANY-method
> ###   [,sparse_mat,missing,ANY,NULL-method
> ###   [,sparse_mat,missing,missing,ANY-method [<-,sparse_mat-method
> ###   [<-,sparse_mat,ANY,ANY,ANY-method
> ###   [<-,sparse_mat,ANY,missing,ANY-method
> ###   [<-,sparse_mat,missing,ANY,ANY-method
> ###   [<-,sparse_mat,missing,missing,ANY-method t,sparse_matc-method
> ###   t,sparse_matr-method is.sparse as.sparse
> ### Keywords: classes array
> 
> ### ** Examples
> 
> keys <- list(
+     c(1,4,8,10),
+     c(2,3,5),
+     c(1,2,7,9))
> 
> values <- list(
+     rnorm(4),
+     rnorm(3),
+     rnorm(4))
> 
> init1 <- list(keys=keys, values=values)
> 
> x <- sparse_mat(init1, nrow=10)
> x[]
            [,1]       [,2]       [,3]
 [1,] -0.6264538  0.0000000  0.7383247
 [2,]  0.0000000  0.3295078  0.5757814
 [3,]  0.0000000 -0.8204684  0.0000000
 [4,]  0.1836433  0.0000000  0.0000000
 [5,]  0.0000000  0.4874291  0.0000000
 [6,]  0.0000000  0.0000000  0.0000000
 [7,]  0.0000000  0.0000000 -0.3053884
 [8,] -0.8356286  0.0000000  0.0000000
 [9,]  0.0000000  0.0000000  1.5117812
[10,]  1.5952808  0.0000000  0.0000000
> 
> init2 <- matrix(rbinom(100, 1, 0.2), nrow=10, ncol=10)
> 
> y <- sparse_mat(init2, keys=letters[1:10])
> y[]
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
 [1,]    0    0    0    0    0    0    0    0    0     0
 [2,]    0    0    0    0    0    0    0    1    1     0
 [3,]    0    1    0    0    0    0    0    0    0     0
 [4,]    0    0    0    0    0    1    0    0    0     0
 [5,]    0    0    0    0    0    1    0    0    0     0
 [6,]    0    0    0    0    0    0    0    0    0     0
 [7,]    1    0    0    0    0    0    0    1    1     0
 [8,]    0    0    0    0    1    1    0    0    0     0
 [9,]    0    1    0    1    0    0    0    0    1     1
[10,]    0    0    1    0    1    0    0    0    0     0
> 
> 
> 
> cleanEx()
> nameEx("struct")
> ### * struct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: struct
> ### Title: C-Style Structs Stored on Disk
> ### Aliases: struct
> ### Keywords: utilities array IO
> 
> ### ** Examples
> 
> x <- struct(first=c(int=1), second=c(double=1))
> 
> x$first <- 2L
> x$second <- 3.33
> 
> x$first
[1] 2
> x$second
[1] 3.33
> 
> 
> 
> cleanEx()
> nameEx("summary-stats")
> ### * summary-stats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary-stats
> ### Title: Summary Statistics for "matter" Objects
> ### Aliases: Summary mean sd var range,matter-method min,matter-method
> ###   max,matter-method prod,matter-method sum,matter-method
> ###   mean,matter-method sd,matter-method var,matter-method
> ###   any,matter-method all,matter-method colSds colVars
> ###   colMeans,matter_mat-method colSums,matter_mat-method
> ###   colSds,matter_mat-method colVars,matter_mat-method rowSds rowVars
> ###   rowMeans,matter_mat-method rowSums,matter_mat-method
> ###   rowSds,matter_mat-method rowVars,matter_mat-method
> ### Keywords: methods univar
> 
> ### ** Examples
> 
> x <- matter(1:100, nrow=10, ncol=10)
> 
> sum(x)
[1] 5050
> mean(x)
[1] 50.5
> var(x)
[1] 841.6667
> sd(x)
[1] 29.01149
> 
> colSums(x)
 [1]  55 155 255 355 455 555 655 755 855 955
> colMeans(x)
 [1]  5.5 15.5 25.5 35.5 45.5 55.5 65.5 75.5 85.5 95.5
> colVars(x)
 [1] 9.166667 9.166667 9.166667 9.166667 9.166667 9.166667 9.166667 9.166667
 [9] 9.166667 9.166667
> colSds(x)
 [1] 3.02765 3.02765 3.02765 3.02765 3.02765 3.02765 3.02765 3.02765 3.02765
[10] 3.02765
> 
> rowSums(x)
 [1] 460 470 480 490 500 510 520 530 540 550
> rowMeans(x)
 [1] 46 47 48 49 50 51 52 53 54 55
> rowVars(x)
 [1] 916.6667 916.6667 916.6667 916.6667 916.6667 916.6667 916.6667 916.6667
 [9] 916.6667 916.6667
> rowSds(x)
 [1] 30.2765 30.2765 30.2765 30.2765 30.2765 30.2765 30.2765 30.2765 30.2765
[10] 30.2765
> 
> 
> 
> cleanEx()
> nameEx("tolerance-method")
> ### * tolerance-method
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tolerance
> ### Title: Get or Set Tolerance for an Object
> ### Aliases: tolerance tolerance<-
> ### Keywords: utilities
> 
> ### ** Examples
> 
> x <- sparse_mat(diag(10), keys=rnorm(10))
> tolerance(x)
[1] 0
attr(,"type")
[1] absolute
Levels: absolute relative
> tolerance(x) <- c(absolute=0.1)
> x[]
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
 [1,]    1    0    0    0    0    0    0    0    0     0
 [2,]    0    1    0    0    0    0    0    0    0     0
 [3,]    0    0    0    0    0    0    0    0    0     0
 [4,]    0    0    0    1    0    0    0    0    0     0
 [5,]    0    0    0    0    1    0    0    0    0     0
 [6,]    0    0    1    0    0    1    0    0    0     0
 [7,]    0    0    0    0    0    0    0    0    0     0
 [8,]    0    0    0    0    0    0    0    1    0     0
 [9,]    0    0    0    0    0    0    1    0    1     0
[10,]    0    0    0    0    0    0    0    0    0     1
> 
> 
> 
> cleanEx()
> nameEx("uuid")
> ### * uuid
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: uuid
> ### Title: Universally Unique Identifiers
> ### Aliases: uuid raw2hex hex2raw
> ### Keywords: utilities
> 
> ### ** Examples
> 
> id <- uuid()
> id
$string
[1] "435e91e5-33e5-4fa9-a80f-342dae61c27c"

$bytes
 [1] 43 5e 91 e5 33 e5 4f a9 a8 0f 34 2d ae 61 c2 7c

> hex2raw(id$string)
 [1] 43 5e 91 e5 33 e5 4f a9 a8 0f 34 2d ae 61 c2 7c
> raw2hex(id$bytes)
[1] "435e91e533e54fa9a80f342dae61c27c"
> 
> 
> 
> cleanEx()
> nameEx("virtual_mat-class")
> ### * virtual_mat-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: virtual_mat-class
> ### Title: Virtual Matrices
> ### Aliases: class:virtual_mat virtual_mat virtual_matc virtual_matr
> ###   virtual_mat-class virtual_matc-class virtual_matr-class
> ###   [,virtual_mat-method [,virtual_mat,ANY,ANY,ANY-method
> ###   [,virtual_mat,ANY,ANY,NULL-method
> ###   [,virtual_mat,ANY,missing,ANY-method
> ###   [,virtual_mat,ANY,missing,NULL-method
> ###   [,virtual_mat,missing,ANY,ANY-method
> ###   [,virtual_mat,missing,ANY,NULL-method
> ###   [,virtual_mat,missing,missing,ANY-method
> ###   datamode<-,virtual_mat-method t,virtual_mat-method is.virtual
> ###   as.virtual
> ### Keywords: classes array
> 
> ### ** Examples
> 
> x <- matrix(runif(50), nrow=10, ncol=5)
> 
> x <- virtual_mat(list(x, x))
> x[]
            [,1]      [,2]       [,3]      [,4]      [,5]       [,6]      [,7]
 [1,] 0.26550866 0.2059746 0.93470523 0.4820801 0.8209463 0.26550866 0.2059746
 [2,] 0.37212390 0.1765568 0.21214252 0.5995658 0.6470602 0.37212390 0.1765568
 [3,] 0.57285336 0.6870228 0.65167377 0.4935413 0.7829328 0.57285336 0.6870228
 [4,] 0.90820779 0.3841037 0.12555510 0.1862176 0.5530363 0.90820779 0.3841037
 [5,] 0.20168193 0.7698414 0.26722067 0.8273733 0.5297196 0.20168193 0.7698414
 [6,] 0.89838968 0.4976992 0.38611409 0.6684667 0.7893562 0.89838968 0.4976992
 [7,] 0.94467527 0.7176185 0.01339033 0.7942399 0.0233312 0.94467527 0.7176185
 [8,] 0.66079779 0.9919061 0.38238796 0.1079436 0.4772301 0.66079779 0.9919061
 [9,] 0.62911404 0.3800352 0.86969085 0.7237109 0.7323137 0.62911404 0.3800352
[10,] 0.06178627 0.7774452 0.34034900 0.4112744 0.6927316 0.06178627 0.7774452
            [,8]      [,9]     [,10]
 [1,] 0.93470523 0.4820801 0.8209463
 [2,] 0.21214252 0.5995658 0.6470602
 [3,] 0.65167377 0.4935413 0.7829328
 [4,] 0.12555510 0.1862176 0.5530363
 [5,] 0.26722067 0.8273733 0.5297196
 [6,] 0.38611409 0.6684667 0.7893562
 [7,] 0.01339033 0.7942399 0.0233312
 [8,] 0.38238796 0.1079436 0.4772301
 [9,] 0.86969085 0.7237109 0.7323137
[10,] 0.34034900 0.4112744 0.6927316
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.36 0.117 2.52 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
